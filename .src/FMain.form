# Gambas Form File 3.0

{ Form Form
  MoveScaled(0,0,138,101)
  Text = ("Servo Control and management LX-16A thru BusLinker V2.2")
  { LegTesting Menu
    Text = ("Legs")
    { TestingLeg Menu
      Text = ("Configure")
    }
    { Groups Menu
      Text = ("Groups")
    }
  }
  { ServoControler Menu
    Text = ("Servo Control")
    { ServoControlMulti Menu
      Text = ("Move Group of Servos")
    }
    { ScriptRunner Menu
      Text = ("Script Runner/Edit")
    }
  }
  { StartServos Button
    MoveScaled(2,2,14,4)
    ToolTip = ("You Must Do This First to Connect to serial Port and Enumerate Servos")
    Text = ("Start")
  }
  { ServoAssignmentPanel Panel
    MoveScaled(36,2,34,11)
    Enabled = False
    Background = Color.LightGray
    { DoAssign Button
      MoveScaled(11,1,10,4)
      Text = ("DoAssign")
    }
    { ServoAssignTo TextBox
      MoveScaled(24,1,5,4)
      Text = ("1")
    }
    { Label1 Label
      MoveScaled(3,7,28,3)
      Text = ("Change Servo ID from -> To")
    }
    { ServoAssignFrom TextBox
      MoveScaled(4,1,5,4)
      Text = ("1")
    }
  }
  { !ReadOut TextArea
    MoveScaled(77,2,59,42)
    #Public = True
    Font = Font["DejaVu Sans Mono"]
    Text = ("Select \"Start\" To connect to Servo\ncontroller.\n\nBusLinker 2.2 and 2.1 are both\nsupported(ie tested)\n")
    ReadOnly = True
  }
  { ListServos Button
    MoveScaled(2,7,14,4)
    Enabled = False
    ToolTip = ("You Must Do this to See Servos in the Dropdown. \nIt will Load the available servos into the dropdown box, Allowing you to Manage the settings for those servos. Servo number zero is the Broacast address servo. If the manager has not completed detecting the servos when you click this then you need to do it again.")
    Text = ("List Servos")
  }
  { Button2 Button
    MoveScaled(114,89,10,4)
    Text = ("Quit")
  }
  { StopAllServosNow Button
    MoveScaled(2,12,14,4)
    Enabled = False
    ToolTip = ("Stop All moving servos now")
    Text = ("Stop All Move")
  }
  { AccessServoPanel Panel
    MoveScaled(2,17,72,53)
    Enabled = False
    { Label2 Label
      MoveScaled(1,1,13,2)
      Text = ("Active Servo")
    }
    { LoadServo Button
      MoveScaled(16,3,11,4)
      ToolTip = ("This will cause the servo ro remain loaded or powered on between movements. This means that the servo will hold its position between move commands.\nUnloaded the servoe will move from external force between move commands.\nIt seems that the servos will move even in unloaded mode ie. powered off\n")
      Text = ("Load")
    }
    { UnLoad Button
      MoveScaled(29,3,13,4)
      ToolTip = ("This will power down the servo motor and allow. External inputs to move the servo.\nThe servo will still respond to move commands. Even if the document says it will not. but at the end of the move the motor will be off.\nSee unloaded to force the servo to hold position after a move.")
      Text = ("UnLoad")
    }
    { HomeServo Button
      MoveScaled(16,8,11,4)
      ToolTip = ("Moves to home position,  the point from which all angle calculations are made . It defaults to 500 center for these servos. which cam move zero to 1000")
      Text = ("Home")
    }
    { ReadPosition Button
      MoveScaled(29,8,13,4)
      Text = ("Read Pos")
    }
    { ReadVin Button
      MoveScaled(16,13,11,4)
      Text = ("VIN")
    }
    { CurrentVoltage TextBox
      MoveScaled(29,13,13,4)
      Enabled = False
    }
    { GetTemp Button
      MoveScaled(16,18,11,4)
      Text = ("Temp")
    }
    { CurrentTemp TextBox
      MoveScaled(29,18,13,4)
      Enabled = False
    }
    { MinVin TextBox
      MoveScaled(43,13,11,4)
    }
    { MaxVin TextBox
      MoveScaled(55,13,10,4)
    }
    { MaxTemp TextBox
      MoveScaled(43,18,11,4)
    }
    { CurrentAngle TextBox
      MoveScaled(43,8,11,4)
      Enabled = False
    }
    { MovingServo Slider
      MoveScaled(16,25,52,2)
      ToolTip = ("Move the Servo or Speed control ")
      MaxValue = 1000
      Mark = True
      Value = 500
    }
    { Panel3 Panel
      MoveScaled(2,9,12,11)
      ToolTip = ("Sets the mode of servo operation.\nIt may operate as a motor, speed controlled by the slider\nor as a servo angle controlled by the slider")
      { MotorModeOn RadioButton
        MoveScaled(1,4,11,3)
        Text = ("Motor")
      }
      { ServoModeOn RadioButton
        MoveScaled(1,7,11,3)
        Text = ("Servo")
        Value = True
      }
      { Label8 Label
        MoveScaled(4,0,7,3)
        Text = ("Mode")
      }
    }
    { CheckSrvPwr Button
      MoveScaled(43,3,11,4)
      Text = ("Check")
    }
    { !CurrentServo ComboBox
      MoveScaled(1,3,14,4)
      #Public = True
      ToolTip = ("This is the list of Servos Online.\nServo zero is always the broadcast address. This will allow you to control or move all of the servos at the same time. Stop all or switch all to motor or servo mode.\n\nYou can not broadcast requests for information. this is not supported")
    }
    { PwrOnOff TextBox
      MoveScaled(55,3,11,4)
      Enabled = False
    }
    { AngleOffset Slider
      MoveScaled(17,36,34,4)
      ToolTip = ("When You move this slider it will adjust the servo by up to 125 +or - ticks .024 degrees. This adjustment will stay until the servo is powered off. You must save the adjustment to have it written to the Servos ROM. Making it permenant.")
      MinValue = -125
      MaxValue = 125
    }
    { Label3 Label
      MoveScaled(19,34,32,3)
      Text = ("Set Servo Angle Offset Adjust")
    }
    { SaveAngleOffset Button
      MoveScaled(58,36,13,4)
      ToolTip = ("This will program the servo to automaticall adjust all movements")
      Text = ("Save Angle")
    }
    { lab1 Label
      MoveScaled(18,43,22,3)
      Text = ("Get/Set Angle Limits")
    }
    { GetAngleLimit Button
      MoveScaled(18,47,8,3)
      ToolTip = ("Program the servo with min and max angles of movement. Ie stop the robot from kill its parts")
      Text = ("Get")
    }
    { SetAngleLimit Button
      MoveScaled(27,47,7,3)
      Text = ("Set")
    }
    { AngleLowLimit TextBox
      MoveScaled(38,47,12,3)
    }
    { AngleHighLimit TextBox
      MoveScaled(52,47,11,3)
    }
    { Label4 Label
      MoveScaled(41,43,7,3)
      Text = ("Low")
    }
    { Label5 Label
      MoveScaled(53,43,7,3)
      Text = ("High")
    }
    { AngleOffsetNow TextBox
      MoveScaled(52,36,6,4)
      Enabled = False
      Text = ("0")
    }
    { SetVin Button
      MoveScaled(66,13,4,4)
      Text = ("Set")
    }
    { SetTemp Button
      MoveScaled(66,18,4,4)
      Text = ("Set")
    }
    { DisplayTimes Panel
      MoveScaled(2,22,13,12)
      ToolTip = ("Test the Query Response time of Servo\nThru all the layers and Back This is limited\nby the serial interface speed. \nLayers of this control\nServo is opened with a call back to the GUI object. Callback is the gui object or any object that used the library. The object must have a servo_read method.\nthis is just done once to access the servo.\ngui -> ServoManager.openServo(id, callback object) -> Servo.OpenServo(Callback object)\noutput seq:  Display(GUI) ->Servo.MessageID(parms)->IoManager-> out\nOn input messages are given to Servo Manager who routes the message to the correct servo. The servo processes the message or forwards it to the callback of it has been set. \ninput seq: IoManager -> Servomanager.Dispatch-> Servo->Callback if set\n\nTime is measured from Gui to Gui , From IoMnagaer out till Message Recieved\n")
      { Label7 Label
        MoveScaled(1,1,12,3)
        Text = ("Show Time")
      }
      { ShowTimer RadioButton
        MoveScaled(1,5,10,3)
        ToolTip = ("Test the Query Response time of Servo\nThru all the layers and Back This is limited\nby the serial interface speed. \nLayers of this control\nServo is opened with a call back to the GUI object. Callback is the gui object or any object that used the library. The object must have a servo_read method.\nthis is just done once to access the servo.\ngui -> ServoManager.openServo(id, callback object) -> Servo.OpenServo(Callback object)\noutput seq:  Display(GUI) ->Servo.MessageID(parms)->IoManager-> out\nOn input messages are given to Servo Manager who routes the message to the correct servo. The servo processes the message or forwards it to the callback of it has been set. \ninput seq: IoManager -> Servomanager.Dispatch-> Servo->Callback if set\n\nTime is measured from Gui to Gui , From IoMnagaer out till Message Recieved\n")
        Text = ("On")
        Value = True
      }
      { DoNotShowTime RadioButton
        MoveScaled(1,8,11,3)
        ToolTip = ("Test the Query Response time of Servo\nThru all the layers and Back This is limited\nby the serial interface speed. \nLayers of this control\nServo is opened with a call back to the GUI object. Callback is the gui object or any object that used the library. The object must have a servo_read method.\nthis is just done once to access the servo.\ngui -> ServoManager.openServo(id, callback object) -> Servo.OpenServo(Callback object)\noutput seq:  Display(GUI) ->Servo.MessageID(parms)->IoManager-> out\nOn input messages are given to Servo Manager who routes the message to the correct servo. The servo processes the message or forwards it to the callback of it has been set. \ninput seq: IoManager -> Servomanager.Dispatch-> Servo->Callback if set\n\nTime is measured from Gui to Gui , From IoMnagaer out till Message Recieved\n")
        Text = ("Off")
      }
    }
    { IoTraceOnOff CheckBox
      MoveScaled(2,37,14,5)
      NoTabFocus = True
      Text = ("I/O Trace")
    }
    { SetHomePosition Button
      MoveScaled(55,8,11,4)
      ToolTip = ("Sets the home to the current read position, This is the point that all angle calculations start. 500 being the default and center.")
      Text = ("Set Home")
    }
    { SetZeroPosition Button
      MoveScaled(55,29,16,3)
      Tag = "This sets the offset from home that the servo will use when go zero point is called.\nThis is a software programmed and remeber zero position"
      Text = ("Set  Zero Point")
    }
    { ZeroPointValue TextBox
      MoveScaled(43,29,11,3)
    }
    { Label10 Label
      MoveScaled(17,29,23,3)
      Text = ("Zero/Rest point adjust")
    }
  }
  { ClearScreen Button
    MoveScaled(99,89,15,4)
    Text = ("Clear Text")
  }
  { CloseAllItems Button
    MoveScaled(18,2,12,4)
    ToolTip = ("This will stop everything and disconnect from serial port")
    Text = ("Stop")
  }
  { Label6 Label
    MoveScaled(2,70,46,7)
    Text = ("Select 1 or more Io port below.  Max 5 ports\nBefore Clicking start!")
  }
  { ServosAngles Panel
    MoveScaled(76,47,59,24)
    { tTextBox1 TextBox
      MoveScaled(3,7,12,3)
      ReadOnly = True
    }
    { tTextBox3 TextBox
      MoveScaled(31,7,12,3)
      ReadOnly = True
    }
    { tTextBox4 TextBox
      MoveScaled(45,7,12,3)
      ReadOnly = True
    }
    { tTextBox5 TextBox
      MoveScaled(3,12,12,3)
      ReadOnly = True
    }
    { tTextBox6 TextBox
      MoveScaled(17,12,12,3)
      ReadOnly = True
    }
    { tTextBox7 TextBox
      MoveScaled(31,12,12,3)
      ReadOnly = True
    }
    { tTextBox8 TextBox
      MoveScaled(45,12,12,3)
      ReadOnly = True
    }
    { tTextBox9 TextBox
      MoveScaled(3,17,12,3)
      ReadOnly = True
    }
    { tTextBox10 TextBox
      MoveScaled(17,17,12,3)
      ReadOnly = True
    }
    { tTextBox2 TextBox
      MoveScaled(17,7,12,3)
      ReadOnly = True
    }
    { tTextBox11 TextBox
      MoveScaled(31,17,12,3)
      ReadOnly = True
    }
    { tTextBox12 TextBox
      MoveScaled(45,17,12,3)
      ReadOnly = True
    }
    { Label9 Label
      MoveScaled(3,1,41,3)
      Text = ("Position Of Active Servos")
    }
  }
  { IoPortList ListBox
    MoveScaled(2,78,40,16)
    Mode = Select.Multiple
    Sorted = True
  }
}
